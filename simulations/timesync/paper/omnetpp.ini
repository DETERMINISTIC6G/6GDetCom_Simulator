[General]
seed-set = 0
sim-time-limit = 180s
abstract = true
description = "abstract"
num-rngs = 5

# enable time synchronization in all network nodes
*.*.hasTimeSynchronization = true

# Set DetComClock limits
**.detComClock.typename = "OscillatorBasedClock"
**.detComClock.oscillator.typename = "OffsetLimitedRandomDriftOscillator"
**.detComClock.oscillator.maxOffset = 0ns#450ns
**.detComClock.oscillator.changeInterval = 12.5ms
**.detComClock.oscillator.maxDriftRateAdjustment = 0.0009877ppm/4
**.detComClock.oscillator.driftRateChange = 0ppm#uniform(-0.0009877ppm, 0.0009877ppm)
**.detComClock.oscillator.initialDriftRate = 0.0000001ppm
**.detComClock.referenceClock = "detCom.nwtt.detComClock"
**.nwtt.detComClock.initialClockTime = 0s
**.detComClock.initialClockTime = 0s#uniform(-450ns,450ns)
**.detComClock.rng-0 = 4
**.detComClock.oscillator.rng-0 = 4


# all oscillators have a constant drift rate (specified with a random distribution for each one) 
# except for the master clocks, which have a random drift rate
#**.clock.oscillator.typename = "RandomDriftOscillator"
#*.timeTransmitter.clock.oscillator.typename = "RandomDriftOscillator"  
**.clock.oscillator.typename = "RandomDriftOscillator" # use ConstantDriftOscillator for testing in new testing scenario.
**.clock.*.oscillator.typename = "RandomDriftOscillator" # use ConstantDriftOscillator for testing in new testing scenario.
**.oscillator.changeInterval = 12.5ms
**.oscillator.driftRate = uniform(-100ppm, 100ppm)
**.oscillator.initialDriftRate = uniform(-100ppm, 100ppm) # According to 802.1AS B.1.1
**.oscillator.driftRateChange = uniform(-0.1235e-3 ppm, 0.1235e-3 ppm) # Based on 802.1AS B.1.3.2 (simplified to max error being 5ns/s, needs to be adapted if changeInterval is also adapted)
**.oscillator.driftRateChangeUpperLimit = 100ppm
**.oscillator.driftRateChangeLowerLimit = -100ppm


**.kp=3
**.ki=1
**.offsetThreshold = 1 us
**.useC5Grr = true

# all Ethernet interfaces have 100 Mbps speed
*.*.eth[*].bitrate = 100Mbps
*.*.*.eth[*].bitrate = 100Mbps

*.visualizer.typename = "IntegratedMultiCanvasVisualizer"
*.visualizer.infoVisualizer[*].displayInfos = true

*.histogramContainer.histograms = {Uplink: "../../../../deterministic6g_data/PD-Wireless-5G-1/s1-UL_wall.xml", Downlink: "../../../../deterministic6g_data/PD-Wireless-5G-1/s10-DL_wall.xml"}

*.scenarioManagerLink.script = xmldoc("link_failure.xml")

**.sendAnnounceImmediately = true


[Config Delay]
abstract = true
*.detCom.dstt[*].delayDownlink = rngProvider("histogramContainer","Downlink")
*.detCom.dstt[*].delayUplink = rngProvider("histogramContainer","Uplink")


[Config BMCA]
network = TimeSyncNetwork
description = "Basic tree topology with one master clock"

*.scenarioManagerGm.script = xmldoc("gm_failure_bmca.xml")

**.resetClockStateOnSyncLoss = false

*.detCom.nwtt.detComClock.oscillator.rng-0 = 1
*.tsnDeviceA.clock.oscillator.rng-0 = 2
*.tsnDeviceB.clock.oscillator.rng-0 = 3

**.gptp.gptpNodeType = "BMCA_NODE"
**.gptp.slavePort = ""
**.gptp.masterPorts = []

*.detCom.nwtt.gptp.grandmasterPriority1 = 1
*.tsnDeviceA.gptp.grandmasterPriority1 = 2
*.tsnDeviceB.gptp.grandmasterPriority1 = 3
**.grandmasterPriority1 = 200

*.detCom.*.gptp.bmcaPorts = ["eth0", "tt0", "tt1"]
*.tsnDevice*.gptp.bmcaPorts = ["eth0"]
*.tsnSwitch*.gptp.bmcaPorts = ["eth0", "eth1"]


# Set all reference clocks to master clock so the time difference can be visualized
**.clock.referenceClock = "detCom.nwtt.clock"

# data link visualizer displays gPTP time synchronization packets
*.visualizer.dataLinkVisualizer[0].displayLinks = true
*.visualizer.dataLinkVisualizer[0].activityLevel = "protocol"
*.visualizer.dataLinkVisualizer[0].packetFilter = "GptpSync"
*.visualizer.dataLinkVisualizer[0].lineColor = "blue2"

*.visualizer.numInfoVisualizers = 2
*.visualizer.infoVisualizer[0].modules = "*.tsnSwitch*.clock"
*.visualizer.infoVisualizer[0].placementHint = "bottom"
*.visualizer.infoVisualizer[1].modules = "*.tsnDevice*.clock"
*.visualizer.infoVisualizer[1].placementHint = "bottom"
*.tsnDevice*.clock.displayStringTextFormat = "diff: %d"
*.tsnSwitch*.clock.displayStringTextFormat = "diff: %d"


[Config HotStandby1]
network = TimeSyncNetwork
description = "Basic tree topology with one master clock"

*.scenarioManagerGm.script = xmldoc("gm_failure_hotstandby.xml")

*.detCom.nwtt.detComClock.oscillator.rng-0 = 1
*.tsnDeviceA.clock.clock[0].oscillator.rng-0 = 2
*.tsnDeviceB.clock.clock[0].oscillator.rng-0 = 3

**.gptp.typename = "MultiDomainGptp"
**.gptp.numDomains = 2

*.tsnDevice*.clock.typename = "MultiClock"
*.detCom.dstt[*].clock.typename = "MultiClock"
*.detCom.nwtt.clock.typename = "MultiClock"
*.tsnSwitch*.clock.typename = "MultiClock"

*.detCom.nwtt.clock.clock[0].oscillator.initialDriftRate = 0ppm # According to 802.1AS B.1.1

*.detCom.*tt*.gptp.domain[*].typename = "DetComGptp"
*.detCom.*tt*.gptp.domain[*].detComClockModule = "^.^.detComClock"


# tsnDeviceA clock 0 is slave to nwtt, master for domain 1
# tsnDeviceA clock 1 is fallback on domain 2
*.tsnDeviceA.clock.numClocks = 1
*.tsnDeviceA.gptp.domain[0..1].clockModule = "^.^.clock.clock[0]"


**.clock.numClocks = 2


*.tsnDeviceA.gptp.hasHotStandby = false



# Domain 0 (nwtt master)
#**.gptp.domain[0].syncInitialOffset = 30s
#**.gptp.domain[0].pdelayInitialOffset = 30s
*.detCom.nwtt.gptp.domain[0].gptpNodeType = "MASTER_NODE"
*.detCom.nwtt.gptp.domain[0].masterPorts = ["eth0", "tt0", "tt1"]
*.detCom.dstt[*].gptp.domain[0].slavePort = "tt0"
*.detCom.dstt[*].gptp.domain[0].masterPorts = ["eth0"]
*.tsnSwitch*.gptp.domain[0].slavePort = "eth0"
*.tsnSwitch*.gptp.domain[0].masterPorts = ["eth1"]
*.tsnDevice*.gptp.domain[0].slavePort = "eth0"
**.domain[0].syncInitialOffset = syncInterval * 1 / 2


# Domain 1 (tsnDeviceA master)
#**.gptp.domain[1].syncInitialOffset = 30s
#**.gptp.domain[1].pdelayInitialOffset = 30s
*.tsnDeviceA.gptp.domain[1].gptpNodeType = "MASTER_NODE"
*.tsnDeviceA.gptp.domain[1].masterPorts = ["eth0"]
*.tsnDeviceA.gptp.domain[1].slavePort = ""
*.tsnSwitchA*.gptp.domain[1].slavePort = "eth1"
*.tsnSwitchA*.gptp.domain[1].masterPorts = ["eth0"]
*.detCom.nwtt.gptp.domain[1].slavePort = "eth0"
*.detCom.nwtt.gptp.domain[1].masterPorts = ["tt0", "tt1"]
*.detCom.dstt[*].gptp.domain[1].slavePort = "tt0"
*.detCom.dstt[*].gptp.domain[1].masterPorts = ["eth0"]
*.tsnSwitchB1.gptp.domain[1].slavePort = "eth0"
*.tsnSwitchB1.gptp.domain[1].masterPorts = ["eth1"]
*.tsnDevice*.gptp.domain[1].slavePort = "eth0"
**.domain[1].syncInitialOffset = syncInterval * 2/2

# Set all reference clocks to master clock so the time difference can be visualized
**.clock*.referenceClock = "detCom.nwtt.detComClock"


[Config HotStandby1_Delay]
extends = HotStandby1, Delay












[Config HotStandby2]
network = TimeSyncNetwork
description = "Basic tree topology with one master clock"

*.scenarioManagerGm.script = xmldoc("gm_failure_hotstandby.xml")

*.detCom.nwtt.detComClock.oscillator.rng-0 = 1
*.tsnDeviceA.clock.clock[0].oscillator.rng-0 = 2
*.tsnDeviceB.clock.clock[0].oscillator.rng-0 = 3

**.gptp.typename = "MultiDomainGptp"
**.gptp.numDomains = 2

*.tsnDevice*.clock.typename = "MultiClock"
*.detCom.dstt[*].clock.typename = "MultiClock"
*.detCom.nwtt.clock.typename = "MultiClock"
*.tsnSwitch*.clock.typename = "MultiClock"

*.detCom.nwtt.clock.clock[0].oscillator.initialDriftRate = 0ppm # According to 802.1AS B.1.1

*.detCom.*tt*.gptp.domain[*].typename = "DetComGptp"
*.detCom.*tt*.gptp.domain[*].detComClockModule = "^.^.detComClock"

# tsnDeviceA clock 0 is slave to nwtt, master for domain 1
# tsnDeviceA clock 1 is fallback on domain 2
*.tsnDeviceA.clock.numClocks = 1
*.tsnDeviceA.gptp.domain[0..1].clockModule = "^.^.clock.clock[0]"

# tsnDeviceB clock 0 is slave to nwtt, clock 1 to tsnDevice A
# activeIndex is master to domain 2
*.tsnDeviceB.clock.numClocks = 1
*.tsnDeviceB.gptp.domain[0..1].clockModule = "^.^.clock.clock[0]"

**.clock.numClocks = 2

*.tsnDeviceA.gptp.hasHotStandby = false
*.tsnDeviceB.gptp.hasHotStandby = false


# Domain 0 (nwtt master)
#**.gptp.domain[0].syncInitialOffset = 30s
#**.gptp.domain[0].pdelayInitialOffset = 30s
*.detCom.nwtt.gptp.domain[0].gptpNodeType = "MASTER_NODE"
*.detCom.nwtt.gptp.domain[0].masterPorts = ["eth0", "tt0", "tt1"]
*.detCom.dstt[*].gptp.domain[0].slavePort = "tt0"
*.detCom.dstt[*].gptp.domain[0].masterPorts = ["eth0"]
*.tsnSwitch*.gptp.domain[0].slavePort = "eth0"
*.tsnSwitch*.gptp.domain[0].masterPorts = ["eth1"]
*.tsnDevice*.gptp.domain[0].slavePort = "eth0"
**.domain[0].syncInitialOffset = syncInterval * 1 / 2


# Domain 1 (tsnDeviceA master, right side)
#**.gptp.domain[1].syncInitialOffset = 30s
#**.gptp.domain[1].pdelayInitialOffset = 30s
**.domain[1].syncInitialOffset = syncInterval * 2 / 2

*.tsnDeviceA.gptp.domain[1].gptpNodeType = "MASTER_NODE"
*.tsnDeviceA.gptp.domain[1].masterPorts = ["eth0"]
*.tsnDeviceA.gptp.domain[1].slavePort = ""
*.tsnSwitchA*.gptp.domain[1].slavePort = "eth1"
*.tsnSwitchA*.gptp.domain[1].masterPorts = ["eth0"]
*.detCom.nwtt.gptp.domain[1].slavePort = "eth0"
*.detCom.nwtt.gptp.domain[1].gptpNodeType = "SLAVE_NODE"

# Domain 2 (tsnDeviceB master, right side)
*.tsn*B*.gptp.domain[1].domainNumber = 2
**.dstt[*].gptp.domain[1].domainNumber = 2
*.tsnDeviceC.gptp.domain[1].domainNumber = 2


*.tsnDeviceB.gptp.domain[1].gptpNodeType = "MASTER_NODE"
*.tsnDeviceB.gptp.domain[1].masterPorts = ["eth0"]
*.tsnDeviceB.gptp.domain[1].slavePort = ""
*.tsnSwitchB*.gptp.domain[1].slavePort = "eth1"
*.tsnSwitchB*.gptp.domain[1].masterPorts = ["eth0"]
*.detCom.dstt[0].gptp.domain[1].slavePort = "eth0"
*.detCom.dstt[0].gptp.domain[1].masterPorts = ["tt1"]
*.detCom.dstt[1].gptp.domain[1].slavePort = "tt1"
*.detCom.dstt[1].gptp.domain[1].masterPorts = ["eth0"]
*.tsnDeviceC.gptp.domain[1].slavePort = "eth0"

# Set all reference clocks to master clock so the time difference can be visualized
**.clock*.referenceClock = "detCom.nwtt.detComClock"



[Config HotStandby2_Delay]
extends = HotStandby2, Delay

[Config BMCA_Delay]
extends = BMCA, Delay


[Config BMCA_Repeat]
network = TimeSyncNetworkMultihop
extends = BMCA_Delay
repeat = 100
seed-set = ${repetition}

*.numSwitchesA = 9
**.sendAnnounceImmediately = false

**.clock.referenceClock = "tsnDeviceA.clock"
**.resetClockStateOnSyncLoss = true


[Config HotStandby1_Repeat]
network = TimeSyncNetworkMultihop
extends = HotStandby1_Delay
repeat = 100
seed-set = ${repetition}

*.numSwitchesA = 9
**.sendAnnounceImmediately = false

**.clock*.referenceClock = "tsnDeviceA.clock.clock[0]"


[Config HotStandby2_Repeat]
network = TimeSyncNetworkMultihop
extends = HotStandby2_Delay
repeat = 100
seed-set = ${repetition}

*.numSwitchesA = 9
**.sendAnnounceImmediately = false

**.clock*.referenceClock = "tsnDeviceA.clock.clock[0]"

