[General]
network = PDC
sim-time-limit = 60s
description = "General configuration"

**.displayGateSchedules = false
**.gateFilter = "**.eth[1].**"
**.gateScheduleVisualizer.height = 16
**.gateScheduleVisualizer.placementHint = "top"

*.histogramContainer.histograms = {Uplink: "../../../deterministic6g_data/PD-Wireless-5G-1/uplink.xml", Downlink: "../../../deterministic6g_data/PD-Wireless-5G-1/downlink.xml"}

**.hasIncomingStreams = true
**.hasOutgoingStreams = true

[PDC_Set]
extends = General

description = "Configuration to set the PDC values"

*.detCom.dstt[*].bridging.pdcCorrection.typename = "PDCLayer"
*.detCom.nwtt.bridging.pdcCorrection.typename = "PDCLayer"

# const pdc
#*.detCom.dstt[*].bridging.pdcCorrection.pdc = 1ms
#*.detCom.nwtt.bridging.pdcCorrection.pdc = 2ms

# per stream pdc
*.detCom.dstt[*].bridging.pdcCorrection.pdcMapping = [{stream: "stream1", pcp: 7, pdc: "2ms"}, {stream: "stream2", pcp: 6, pdc: "3ms"}]
*.detCom.nwtt.bridging.pdcCorrection.pdcMapping = [{stream: "stream1", pcp: 7, pdc: "5ms"}, {stream: "stream2", pcp: 6, pdc: "6ms"}]

[PDC_StreamCoder]
extends = PDC_Set

description = "..."

*.detCom.*.bridging.streamCoder.typename = "StreamCoderLayer"
*.detCom.*.bridging.streamIdentifier.typename = "StreamIdentifierLayer"


*.detCom.dstt[*].bridging.streamIdentifier.identifier.mapping = [{stream: "stream1", packetFilter: expr(udp.destPort == 1001)},
                                                  {stream: "stream2", packetFilter: expr(udp.destPort == 1002)}]

*.detCom.dstt[*].bridging.streamCoder.encoder.mapping = [{stream: "stream1", vlanId: 42, pcp: 7},
												{stream: "stream2", vlanId: 42, pcp: 6}]

*.detCom.dstt[*].bridging.streamCoder.decoder.mapping = [{stream: "stream1", vlanId: 42, destination : "device1", source : "device2", packetFilter: expr(udp.destPort == 1001)},
                                                  {stream: "stream2",  vlanId: 42,  destination : "device1", source : "device2", packetFilter: expr(udp.destPort == 1002)}]


[Activate_Clock]

#*.*.hasTimeSynchronization = true
*.detCom.dstt[0].clock.typename = "IdealClock"
#*.detCom.dstt[0].clock.oscillator.typename = "ConstantDriftOscillator"
#*.detCom.dstt[0].bridging.*.*.clockModule = "^.^.^.clock"

#*.detCom.dstt[*].bridging.pdcCorrection.ingress.clockModule = "^.pdcclock"

#*.detCom.dstt[*].bridging.pdcCorrection.pdcclock.typename = "IdealClock"

#*.detCom.dstt[*].bridging.pdcCorrection.has6gClock = true

[PDC_Uplink]
extends =  PDC_StreamCoder

description = "Basic configuration for uplink"

*.detCom.dstt[0].delayUplink = rngProvider("histogramContainer","Uplink")

# client applications
*.device1.numApps = 1
*.device1.app[0].typename = "UdpSourceApp"
*.device1.app[0].display-name = "stream3"
*.device1.app[0].io.destAddress = "device2"
*.device1.app[0].io.destPort = 1001
*.device1.app[0].source.packetLength = 1000B - 54B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.device1.app[0].source.productionInterval = 10ms

# enable outgoing streams
*.device1.hasOutgoingStreams = true

# server applications
*.device2.numApps = 1
*.device2.app[0].typename = "UdpSinkApp"
*.device2.app[0].io.localPort = 1001

[PDC_Downlink]
extends = PDC_StreamCoder, Activate_Clock
description = "Basic configuration for downlink"

*.detCom.dstt[0].delayDownlink = rngProvider("histogramContainer","Downlink")

# client applications
*.device2.numApps = 2
*.device2.app[0].typename = "UdpSourceApp"
*.device2.app[0].display-name = "stream1"
*.device2.app[0].io.destAddress = "device1"
*.device2.app[0].io.destPort = 1001
*.device2.app[0].source.packetLength = 1000B - 54B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.device2.app[0].source.productionInterval = 10ms


*.device2.app[1].typename = "UdpSourceApp"
*.device2.app[1].display-name = "stream2"
*.device2.app[1].io.destAddress = "device1"
*.device2.app[1].io.destPort = 1002
*.device2.app[1].source.packetLength = 1000B - 54B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.device2.app[1].source.productionInterval = 10ms

# enable outgoing streams
*.device2.hasOutgoingStreams = true


# server applications
*.device1.numApps = 2
*.device1.app[0].typename = "UdpSinkApp"
*.device1.app[0].io.localPort = 1001

*.device1.app[1].typename = "UdpSinkApp"
*.device1.app[1].io.localPort = 1002

