[General] #dynamic scenarios
network = Dynamicscenario
sim-time-limit = 100s
description = "General configuration"
abstract = true


*.histogramContainer.histograms = {Uplink: "../../../deterministic6g_data/PD-Wireless-5G-1/s1-UL_wall.xml", Downlink: "../../../deterministic6g_data/PD-Wireless-5G-1/s10-DL_wall.xml", 
									Test0: "../../../deterministic6g_data/PD-Wireless-5G-1/test.xml"}


#*.scenarioManager.script = xmldoc(${scenario = "../../scripts/output.xml", "../../scripts/output2.xml"})
#*.streamScenarioManager.script = xmldoc(${scenario =  "app-shutdown.xml"})

*.streamScenarioManager.script = xmldoc("app-shutdown.xml")
*.distributionScenarioManager.script = xmldoc("distr-changes.xml")

*.*.dstt[*].eth[*].bitrate = 1Gbps
*.*.nwtt.eth[*].bitrate = 1Gbps


[Baseline_Applications]
extends = General
abstract = true
# DELAYS
############################################################################################
*.detComOne.dstt[*].delayDownlink = rngProvider("histogramContainer","Downlink")
*.detComTwo.dstt[*].delayUplink = rngProvider("histogramContainer","Uplink")
*.detComThree.dstt[*].delayDownlink = truncnormal(0.4,0.01)*1ms

############################################################################################

*.device*.app[*].source.packetNameFormat = "%M-%m-%c"


# client applications

*.device5.numApps = 1
*.device5.app[*].typename = "UdpSourceApp"
*.device5.app[*].source.typename = "DynamicPacketSource"

*.device5.app[0].display-name = "tsn"
*.device5.app[0].io.destAddress = "wirelessdevice1"
*.device5.app[0].io.destPort = 1008
*.device5.app[0].source.packetLength = 1000B - 58B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.device5.app[0].source.productionInterval = 20ms
*.device5.app[0].source.pcp = 7
*.device5.app[0].source.gateIndex = 4
*.device5.app[0].source.latency = 20ms
*.device5.app[0].source.enabled = true


*.device3.numApps = 1
*.device3.app[*].typename = "UdpSourceApp"
*.device3.app[*].source.typename = "DynamicPacketSource"

*.device3.app[0].display-name = "video"
*.device3.app[0].io.destAddress = "wirelessdevice2"
*.device3.app[0].io.destPort = 1005
*.device3.app[0].source.packetLength = 1000B - 58B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.device3.app[0].source.productionInterval = 30ms
*.device3.app[0].source.latency = 30ms
*.device3.app[0].source.pcp = 6
*.device3.app[0].source.gateIndex = 3
*.device3.app[0].source.enabled = true
#
#*.device3.app[1].display-name = "tsn"
#*.device3.app[1].io.destAddress = "wirelessdevice2"
#*.device3.app[1].io.destPort = 1007
#*.device3.app[1].source.packetLength = 1000B + 58B + 12B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
#*.device3.app[1].source.productionInterval = 5ms
#*.device3.app[1].source.pcp = 4
#*.device3.app[1].source.enabled = false



*.device2.numApps = 2
*.device2.app[*].typename = "UdpSourceApp"
*.device2.app[*].source.typename = "DynamicPacketSource"

*.device2.app[0].display-name = "best effort"
*.device2.app[0].io.destAddress = "device4"
*.device2.app[0].io.destPort = 2005
*.device2.app[0].source.packetLength = 1000B - 58B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.device2.app[0].source.productionInterval = 30ms
*.device2.app[0].source.latency = 30ms

#*.device2.app[0].source.enabled = false


*.device2.app[1].display-name = "tsn"
*.device2.app[1].io.destAddress = "wirelessdevice1"
*.device2.app[1].io.destPort = 1006
*.device2.app[1].source.packetLength = 1000B - 58B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.device2.app[1].source.productionInterval = 20ms
*.device2.app[1].source.latency = 20ms
*.device2.app[1].source.pcp = 7
*.device2.app[1].source.gateIndex = 4
#*.device2.app[1].source.enabled = false

*.device1.numApps = 1
*.device1.app[*].typename = "UdpSourceApp"
*.device1.app[*].source.typename = "DynamicPacketSource"

*.device1.app[0].display-name = "tsn"
*.device1.app[0].io.destAddress = "wirelessdevice3"
*.device1.app[0].io.destPort = 1009
*.device1.app[0].source.packetLength = 1000B - 58B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.device1.app[0].source.productionInterval = 20ms
*.device1.app[0].source.latency = 20ms
*.device1.app[0].source.pcp = 7
*.device1.app[0].source.gateIndex = 4
#*.device1.app[0].source.enabled = false
#
*.wirelessdevice5.numApps = 1
*.wirelessdevice5.app[*].typename = "UdpSourceApp"
*.wirelessdevice5.app[*].source.typename = "DynamicPacketSource"

*.wirelessdevice5.app[0].display-name = "video"
*.wirelessdevice5.app[0].io.destAddress = "wirelessdevice3"
*.wirelessdevice5.app[0].io.destPort = 4008
*.wirelessdevice5.app[0].source.packetLength = 1000B - 58B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.wirelessdevice5.app[0].source.productionInterval = 20ms
*.wirelessdevice5.app[0].source.pcp = 6
*.wirelessdevice5.app[0].source.gateIndex = 3
*.wirelessdevice5.app[0].source.latency = 20ms
#*.wirelessdevice5.app[0].source.enabled = false
#


# server applications
*.wirelessdevice2.numApps = 2
*.wirelessdevice2.app[0].typename = "UdpSinkApp"
*.wirelessdevice2.app[0].display-name = "video"
*.wirelessdevice2.app[0].io.localPort = 1005

*.wirelessdevice2.app[1].typename = "UdpSinkApp"
*.wirelessdevice2.app[1].display-name = "tsn"
*.wirelessdevice2.app[1].io.localPort = 1007

*.wirelessdevice1.numApps = 2
*.wirelessdevice1.app[0].typename = "UdpSinkApp"
*.wirelessdevice1.app[0].display-name = "tsn"
*.wirelessdevice1.app[0].io.localPort = 1006

*.wirelessdevice1.app[1].typename = "UdpSinkApp"
*.wirelessdevice1.app[1].display-name = "tsn"
*.wirelessdevice1.app[1].io.localPort = 1008

*.wirelessdevice3.numApps = 2
*.wirelessdevice3.app[0].typename = "UdpSinkApp"
*.wirelessdevice3.app[0].display-name = "tsn"
*.wirelessdevice3.app[0].io.localPort = 1009

*.wirelessdevice3.app[1].typename = "UdpSinkApp"
*.wirelessdevice3.app[1].display-name = "video"
*.wirelessdevice3.app[1].io.localPort = 4008

*.device4.numApps = 1
*.device4.app[0].typename = "UdpSinkApp"
*.device4.app[0].display-name = "best effort"
*.device4.app[0].io.localPort = 2005

#[Baseline_RandomWalk]
#extends=Baseline_uplink, Baseline_downlink
#description = "Basic configuration for networks with a bidirectional communication and a random walk process"

#*.detCom.dstt[0].bridging.delayLayer.delayUplink = randomWalk(5.5ms,normal(0ms,100us))
#*.detCom.dstt[1].bridging.delayLayer.delayDownlink = randomWalk(3.5ms,normal(0ms,70us))


[Schedule_Configurator]
extends=Baseline_Applications

# automatic gate scheduling
*.gateScheduleConfigurator.typename = "ExternalGateScheduleConfigurator"
# the globally used gate scheduling period in each PeriodicGate modules
#*.gateScheduleConfigurator.gateCycleDuration = 0.02s

#*.gateScheduleConfigurator.command = "./benchmarks/heuristic -n %s -s %s -o %s"
*.gateScheduleConfigurator.command = "/home/elmos/Forschungsprojekt/libtsndgm2.0/build/benchmarks/heuristic -n %s -s %s -d %s -o %s"

*.gateScheduleConfigurator.configurationFile = "../data/tsn_configuration.json"
*.gateScheduleConfigurator.networkFile = "/home/elmos/Forschungsprojekt/dynamic-scenario/simulations/dynamicscenario/data/network.json"
*.gateScheduleConfigurator.streamsFile = "/home/elmos/Forschungsprojekt/dynamic-scenario/simulations/dynamicscenario/data/streams.json"
*.gateScheduleConfigurator.histogramsFile = "/home/elmos/Forschungsprojekt/dynamic-scenario/simulations/dynamicscenario/data/histograms.json"

# 58B = 8B (UDP) + 20B (IP) + 4B (802.1 Q-TAG) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
#*.gateScheduleConfigurator.configuration =
#   [{name: "stream1", pcp: 0, gateIndex: 0, application: "app[0]", source: "device2", destination: "wirelessdevice2", packetLength: 1070B, packetInterval: 10ms, maxLatency: 500us},
#    {name: "stream2", pcp: 4, gateIndex: 1, application: "app[1]", source: "device2", destination: "wirelessdevice1", packetLength: 1070B, packetInterval: 10ms, maxLatency: 500us}]

# enable outgoing streams
*.hasEgressTrafficShaping = true

# enable outgoing streams
*.*device*.hasOutgoingStreams = true

# client stream identification
*.*device2.bridging.streamIdentifier.identifier.mapping = [{stream: "best effort", packetFilter: expr(udp.destPort == 2005)},
                                                          {stream: "tsn", packetFilter: expr(udp.destPort == 1006)}]


# client stream identification
*.device1.bridging.streamIdentifier.identifier.mapping = [{stream: "tsn", packetFilter: expr(udp.destPort == 1009)}]



# client stream identification
*.device3.bridging.streamIdentifier.identifier.mapping = [{stream: "video", packetFilter: expr(udp.destPort == 1005)},
															{stream: "tsn", packetFilter: expr(udp.destPort == 1007)}]


# client stream identification
*.device5.bridging.streamIdentifier.identifier.mapping = [{stream: "tsn", packetFilter: expr(udp.destPort == 1008)}]

# client stream identification
*.wirelessdevice5.bridging.streamIdentifier.identifier.mapping = [{stream: "video", packetFilter: expr(udp.destPort == 4008)}]



# client stream encoding
*.*device*.bridging.streamCoder.encoder.mapping = [{stream: "best effort", pcp: 0}, {stream: "video", pcp: 6}, 
                                                  {stream: "tsn", pcp: 7}]


######################################################################################

# enable streams
*.bridge*.hasIncomingStreams = true
*.bridge*.hasOutgoingStreams = true

*.bridge*.bridging.streamCoder.decoder.mapping = [{pcp: 0, stream: "best effort"}, {pcp: 6, stream: "video"},
                                                  {pcp: 7, stream: "tsn"}]

*.bridge*.bridging.streamCoder.encoder.mapping = [{stream: "best effort", pcp: 0}, {stream: "video", pcp: 6}, 
                                                  {stream: "tsn", pcp: 7}]

# enable incoming streams
*.wirelessdevice*.numTraffhasIncomingStreams = true
*.device4.hasIncomingStreams = true

# enable egress traffic shaping
*.bridge*.hasEgressTrafficShaping = true

# time-aware traffic shaping with 4 queues
*.*.eth[*].macLayer.queue.numTrafficClasses = 5
*.*.eth[*].macLayer.queue.queue[0].display-name = "best effort"
*.*.eth[*].macLayer.queue.queue[1].display-name = "excellent effort"
*.*.eth[*].macLayer.queue.queue[2].display-name = "critical"
*.*.eth[*].macLayer.queue.queue[3].display-name = "video"
*.*.eth[*].macLayer.queue.queue[4].display-name = "tsn"
#######################################################################################

# enable streams
*.detCom*.dstt[*].hasIncomingStreams = true
*.detCom*.dstt[*].hasOutgoingStreams = true

*.detCom*.nwtt.hasIncomingStreams = true
*.detCom*.nwtt.hasOutgoingStreams = true

*.detCom*.dstt[*].bridging.streamCoder.decoder.mapping = [{pcp: 0, stream: "best effort"}, {pcp: 6, stream: "video"},
                                                  {pcp: 7, stream: "tsn"}]

*.detCom*.dstt[*].bridging.streamCoder.encoder.mapping = [{stream: "best effort", pcp: 0}, {stream: "video", pcp: 6},
                                                  {stream: "tsn", pcp: 7}]


# enable egress traffic shaping
*.detCom*.dstt[*].hasEgressTrafficShaping = true

# time-aware traffic shaping with 3 queues
*.detCom*.dstt[*].eth[0].macLayer.queue.numTrafficClasses = 5
*.detCom*.dstt[*].eth[0].macLayer.queue.queue[0].display-name = "best effort"
*.detCom*.dstt[*].eth[0].macLayer.queue.queue[1].display-name = "Excellent Effort"
*.detCom*.dstt[*].eth[0].macLayer.queue.queue[2].display-name = "Critical"
*.detCom*.dstt[*].eth[0].macLayer.queue.queue[3].display-name = "video-stream"
*.detCom*.dstt[*].eth[0].macLayer.queue.queue[4].display-name = "tsn"
######################################################################################
# enable streams
*.detCom*.nwtt[*].bridging.streamCoder.decoder.mapping = [{pcp: 0, stream: "best effort"}, {pcp: 6, stream: "video"},
                                                  {pcp: 7, stream: "tsn"} ]

*.detCom*.nwtt[*].bridging.streamCoder.encoder.mapping = [{stream: "best effort", pcp: 0}, {stream: "video", pcp: 6},
                                                  {stream: "tsn", pcp: 7}]


# enable egress traffic shaping
*.detCom*.nwtt[*].hasEgressTrafficShaping = true

# time-aware traffic shaping with 3 queues
*.detCom*.nwtt.eth[0].macLayer.queue.numTrafficClasses = 5
*.detCom*.nwtt.eth[0].macLayer.queue.queue[0].display-name = "best effort"
*.detCom*.nwtt.eth[0].macLayer.queue.queue[1].display-name = "excellent effort"
*.detCom*.nwtt.eth[0].macLayer.queue.queue[2].display-name = "critical"
*.detCom*.nwtt.eth[0].macLayer.queue.queue[3].display-name = "video"
*.detCom*.nwtt.eth[0].macLayer.queue.queue[4].display-name = "tsn"

######################################################################################
*.detCom*.*.tt[*].macLayer.queue.numTrafficClasses = 5
*.detCom*.*.tt[*].macLayer.queue.queue[0].display-name = "best effort"
*.detCom*.*.tt[*].macLayer.queue.queue[1].display-name = "excellent effort"
*.detCom*.*.tt[*].macLayer.queue.queue[2].display-name = "critical "
*.detCom*.*.tt[*].macLayer.queue.queue[3].display-name = "video"
*.detCom*.*.tt[*].macLayer.queue.queue[4].display-name = "tsn"

#######################################################################################


# gate scheduling visualization

#**.displayGateSchedules = false
#**.gateFilter = "**.eth[1].**"
#**.gateScheduleVisualizer.height = 16
#**.gateScheduleVisualizer.placementHint = "top"


#*.visualizer.gateScheduleVisualizer.displayGateSchedules = true
#*.visualizer.gateScheduleVisualizer.displayDuration = 500us
#*.visualizer.gateScheduleVisualizer.gateFilter = "*.bridge*.eth[*].**.transmissionGate[0] or *.bridge*.eth[*].**.transmissionGate[4]"
#	or *.detCom*.dstt[*].eth[0].**.transmissionGate[0]"
#*.visualizer.gateScheduleVisualizer.height = 10

