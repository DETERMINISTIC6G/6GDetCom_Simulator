[General] #dynamic scenarios
sim-time-limit = 100s
description = "General configuration"

**.displayGateSchedules = false
**.gateFilter = "**.eth[1].**"
**.gateScheduleVisualizer.height = 16
**.gateScheduleVisualizer.placementHint = "top"

*.histogramContainer.histograms = {Uplink: "../../../deterministic6g_data/PD-Wireless-5G-1/s1-UL_wall.xml", Downlink: "../../../deterministic6g_data/PD-Wireless-5G-1/s10-DL_wall.xml", 
									Test0: "../../../deterministic6g_data/PD-Wireless-5G-1/test.xml"}


#*.scenarioManager.script = xmldoc(${scenario = "../../scripts/output.xml", "../../scripts/output2.xml"})

*.streamScenarioManager.script = xmldoc(${scenario =  "app-shutdown.xml"})
*.distributionScenarioManager.script = xmldoc("distr-changes.xml")

[Baseline_uplink]
extends = General
network = Dynamicscenario
description = "Basic configuration for networks UPLINK"

*.detCom.dstt[0].delayUplink = rngProvider("histogramContainer","Uplink")

# client applications
*.wirelessdevice1.numApps = 1
*.wirelessdevice1.app[0].typename = "UdpSourceApp"
*.wirelessdevice1.app[*].source.typename = "DynamicPacketSource"

*.wirelessdevice1.app[0].io.destAddress = "device1"
*.wirelessdevice1.app[0].io.destPort = 1001
*.wirelessdevice1.app[0].source.packetLength = 1000B - 54B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.wirelessdevice1.app[0].source.productionInterval = 10ms

# enable outgoing streams
*.wirelessdevice1.hasOutgoingStreams = true

# server applications
*.device1.numApps = 1
*.device1.app[0].typename = "UdpSinkApp"
*.device1.app[0].io.localPort = 1001

*.device2.numApps = 1
*.device2.app[0].typename = "UdpSinkApp"
*.device2.app[0].io.localPort = 1002


[Baseline_downlink]
extends = General
network = Dynamicscenario
description = "Basic configuration for networks DOWNLINK"


*.detCom.dstt[*].delayDownlink = rngProvider("histogramContainer","Downlink")

# client applications
*.device2.numApps = 2
*.device2.app[*].typename = "UdpSourceApp"
*.device2.app[*].source.typename = "DynamicPacketSource"

*.device2.app[0].io.destAddress = "wirelessdevice2"
*.device2.app[0].io.destPort = 1005



*.device2.app[0].source.packetLength = 1000B - 54B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.device2.app[0].source.productionInterval = 10ms

*.device2.app[0].source.enabled = false

*.device2.app[1].io.destAddress = "wirelessdevice1"
*.device2.app[1].io.destPort = 1006

*.device2.app[1].source.packetLength = 1000B - 54B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.device2.app[1].source.productionInterval = 10ms



# enable outgoing streams
*.device2.hasOutgoingStreams = true


# server applications
*.wirelessdevice2.numApps = 1
*.wirelessdevice2.app[0].typename = "UdpSinkApp"

*.wirelessdevice2.app[0].io.localPort = 1005

*.wirelessdevice1.numApps = 1
*.wirelessdevice1.app[0].typename = "UdpSinkApp"
*.wirelessdevice1.app[0].io.localPort = 1006

[Baseline_RandomWalk]
extends=Baseline_uplink, Baseline_downlink
description = "Basic configuration for networks with a bidirectional communication and a random walk process"

*.detCom.dstt[0].bridging.delayLayer.delayUplink = randomWalk(5.5ms,normal(0ms,100us))
*.detCom.dstt[1].bridging.delayLayer.delayDownlink = randomWalk(3.5ms,normal(0ms,70us))
