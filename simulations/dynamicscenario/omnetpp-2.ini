[General]
network = BaselineNetwork

sim-time-limit = 100s
description = "General configuration"
abstract = true


*.histogramContainer.histograms = {Uplink: "../../../deterministic6g_data/PD-Wireless-5G-1/s1-UL_wall.xml",
									Downlink: "../../../deterministic6g_data/PD-Wireless-5G-1/s10-DL_wall.xml",
									Downlink_improve: "../../../deterministic6g_data/PD-Wireless-5G-1/s10-DL_wall_conv_-1.0_0_50.xml",
									Downlink_worse: "../../../deterministic6g_data/PD-Wireless-5G-1/s10-DL_wall_conv_1.0_0_50.xml",
									Uplink_improve: "../../../deterministic6g_data/PD-Wireless-5G-1/s1-UL_wall_conv_-1.0_0_50.xml",
									Uplink_worse: "../../../deterministic6g_data/PD-Wireless-5G-1/s1-UL_wall_conv_1.0_0_50.xml"
									}

**.schedulerCallDelay = 10ms

*.scenarioManager.script = xmldoc("scripts/dyn-changes.xml")

*.*.dstt[*].eth[*].bitrate = 1Gbps
*.*.nwtt.eth[*].bitrate = 1Gbps

*.monitor.globallyNumTrafficClasses = 5
*.monitor.stopWhenNotSchedulable = true
# automatic gate scheduling
*.gateScheduleConfigurator.typename = "ExternalGateScheduleConfigurator"

[Baseline_Applications]
extends = General
abstract = true
# DELAYS
############################################################################################
*.detComOne.dstt[0].delayDownlink = rngProvider("histogramContainer","Downlink_worse")
*.detComOne.dstt[1].delayDownlink = rngProvider("histogramContainer","Downlink")
*.detComOne.dstt[*].delayUplink = rngProvider("histogramContainer","Uplink")
############################################################################################

*.device*.app[*].source.packetNameFormat = "%M-%m-%c"

# client applications

*.device3.numApps = 1
*.device3.app[*].typename = "UdpSourceApp"
*.device3.app[*].source.typename = "DynamicPacketSource"

*.device3.app[0].display-name = "stream1"
*.device3.app[0].io.destAddress = "wirelessdevice2"
*.device3.app[0].io.destPort = 6001
*.device3.app[0].source.packetLength = 1000B - 58B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.device3.app[0].source.productionInterval = 30ms
*.device3.app[0].source.maxLatency = 30ms
*.device3.app[0].source.pcp = 7
*.device3.app[0].source.enabled = false
#


*.device2.numApps = 2
*.device2.app[0].typename = "UdpSourceApp"
*.device2.app[0].source.typename = "DynamicPacketSource"

*.device2.app[0].display-name = "stream2"
*.device2.app[0].io.destAddress = "wirelessdevice2"
*.device2.app[0].io.destPort = 6002
*.device2.app[0].source.packetLength = 1000B - 58B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.device2.app[0].source.productionInterval = 50ms
*.device2.app[0].source.maxLatency = 50ms
*.device2.app[0].source.pcp = 6
#*.device2.app[0].source.enabled = false


*.device2.app[1].typename = "UdpSinkApp"
*.device2.app[1].display-name = "stream4"
*.device2.app[1].io.localPort = 7004


*.device1.numApps = 1
*.device1.app[*].typename = "UdpSourceApp"
*.device1.app[*].source.typename = "DynamicPacketSource"

*.device1.app[0].display-name = "stream5"
*.device1.app[0].io.destAddress = "wirelessdevice1"
*.device1.app[0].io.destPort = 6005
*.device1.app[0].source.packetLength = 1000B - 58B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.device1.app[0].source.productionInterval = 30ms
*.device1.app[0].source.maxLatency = 30ms
*.device1.app[0].source.pcp = 7
#*.device1.app[0].source.enabled = true
#


# server applications
*.wirelessdevice2.numApps = 3
*.wirelessdevice2.app[0].typename = "UdpSinkApp"
*.wirelessdevice2.app[0].display-name = "stream2"
*.wirelessdevice2.app[0].io.localPort = 6002

*.wirelessdevice2.app[1].typename = "UdpSinkApp"
*.wirelessdevice2.app[1].display-name = "stream3"
*.wirelessdevice2.app[1].io.localPort = 6003

*.wirelessdevice2.app[2].typename = "UdpSinkApp"
*.wirelessdevice2.app[2].display-name = "stream1"
*.wirelessdevice2.app[2].io.localPort = 6001

*.wirelessdevice1.numApps = 3
*.wirelessdevice1.app[0].typename = "UdpSinkApp"
*.wirelessdevice1.app[0].display-name = "stream5"
*.wirelessdevice1.app[0].io.localPort = 6005

*.wirelessdevice1.app[1].typename = "UdpSourceApp"
*.wirelessdevice1.app[1].source.typename = "DynamicPacketSource"
*.wirelessdevice1.app[1].display-name = "stream4"
*.wirelessdevice1.app[1].io.destAddress = "device2"
*.wirelessdevice1.app[1].io.destPort = 7004
*.wirelessdevice1.app[1].source.packetLength = 1000B - 58B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.wirelessdevice1.app[1].source.productionInterval = 30ms
*.wirelessdevice1.app[1].source.maxLatency = 30ms
*.wirelessdevice1.app[1].source.pcp = 7

*.wirelessdevice1.app[2].typename = "UdpSourceApp"
*.wirelessdevice1.app[2].source.typename = "DynamicPacketSource"
*.wirelessdevice1.app[2].display-name = "stream3"
*.wirelessdevice1.app[2].io.destAddress = "wirelessdevice2"
*.wirelessdevice1.app[2].io.destPort = 6003
*.wirelessdevice1.app[2].source.packetLength = 1000B - 58B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.wirelessdevice1.app[2].source.productionInterval = 50ms
#*.device2.app[1].source.latency = 20ms
*.wirelessdevice1.app[2].source.pcp = 7
#*.device2.app[1].source.enabled = false

#*.device1.app[0].source.enabled = true
#


[Schedule_Configurator]
extends=Baseline_Applications

*.gateScheduleConfigurator.command = "./benchmarks/heuristic -n %s -s %s -d %s -o %s"


*.gateScheduleConfigurator.configurationFile = "./data/tsn_configuration-" + string(simTime()) + ".json"
*.gateScheduleConfigurator.networkFile = "./data/network-" + string(simTime()) + ".json"
*.gateScheduleConfigurator.streamsFile = "./data/streams-" + string(simTime()) + ".json"
*.gateScheduleConfigurator.histogramsFile = "./data/histograms-" + string(simTime()) + ".json"


# enable outgoing streams
*.hasEgressTrafficShaping = true

# enable outgoing streams
*.*device*.hasOutgoingStreams = true

# client stream identification
*.device1.bridging.streamIdentifier.identifier.mapping = [{stream: "tsn", packetFilter: expr(udp.destPort == 6005)}]


# client stream identification
*.*device2.bridging.streamIdentifier.identifier.mapping = [{stream: "video", packetFilter: expr(udp.destPort == 6002)},
                                                          {stream: "tsn", packetFilter: expr(udp.destPort == 6003)}]

# client stream identification
*.device3.bridging.streamIdentifier.identifier.mapping = [{stream: "tsn", packetFilter: expr(udp.destPort == 6001)}]

*.wirelessdevice1.bridging.streamIdentifier.identifier.mapping = [{stream: "tsn", packetFilter: expr(udp.destPort == 7004)},
																	{stream: "tsn", packetFilter: expr(udp.destPort == 6003)}]

# client stream encoding
*.*device*.bridging.streamCoder.encoder.mapping = [{stream: "best effort", pcp: 0}, {stream: "video", pcp: 6}, 
                                                  {stream: "tsn", pcp: 7}]
*.*device*.bridging.streamCoder.decoder.mapping = [{pcp: 0, stream: "best effort"}, {pcp: 6, stream: "video"},
                                                  {pcp: 7, stream: "tsn"}]


# enable incoming streams
*.wirelessdevice*.numTraffhasIncomingStreams = true
######################################################################################

# enable streams
*.bridge*.hasIncomingStreams = true
*.bridge*.hasOutgoingStreams = true

*.bridge*.bridging.streamCoder.decoder.mapping = [{pcp: 0, stream: "best effort"}, {pcp: 6, stream: "video"},
                                                  {pcp: 7, stream: "tsn"}]

*.bridge*.bridging.streamCoder.encoder.mapping = [{stream: "best effort", pcp: 0}, {stream: "video", pcp: 6}, 
                                                  {stream: "tsn", pcp: 7}]

# enable egress traffic shaping
*.bridge*.hasEgressTrafficShaping = true

# time-aware traffic shaping with 5 queues
*.*.eth[*].macLayer.queue.numTrafficClasses = 5
*.*.eth[*].macLayer.queue.queue[0].display-name = "best effort"
*.*.eth[*].macLayer.queue.queue[1].display-name = "excellent effort"
*.*.eth[*].macLayer.queue.queue[2].display-name = "critical"
*.*.eth[*].macLayer.queue.queue[3].display-name = "video"
*.*.eth[*].macLayer.queue.queue[4].display-name = "tsn"

#######################################################################################

# enable streams
*.detCom*.dstt[*].hasIncomingStreams = true
*.detCom*.dstt[*].hasOutgoingStreams = true

*.detCom*.nwtt.hasIncomingStreams = true
*.detCom*.nwtt.hasOutgoingStreams = true

*.detCom*.dstt[*].bridging.streamCoder.decoder.mapping = [{pcp: 0, stream: "best effort"}, {pcp: 6, stream: "video"},
                                                  {pcp: 7, stream: "tsn"}]

*.detCom*.dstt[*].bridging.streamCoder.encoder.mapping = [{stream: "best effort", pcp: 0}, {stream: "video", pcp: 6},
                                                  {stream: "tsn", pcp: 7}]


# enable egress traffic shaping
*.detCom*.dstt[*].hasEgressTrafficShaping = true
# enable egress traffic shaping
*.detCom*.nwtt[*].hasEgressTrafficShaping = true

# time-aware traffic shaping with 5 queues
*.detCom*.dstt[*].eth[0].macLayer.queue.numTrafficClasses = 5
*.detCom*.dstt[*].eth[0].macLayer.queue.queue[0].display-name = "best effort"
*.detCom*.dstt[*].eth[0].macLayer.queue.queue[1].display-name = "Excellent Effort"
*.detCom*.dstt[*].eth[0].macLayer.queue.queue[2].display-name = "Critical"
*.detCom*.dstt[*].eth[0].macLayer.queue.queue[3].display-name = "video-stream"
*.detCom*.dstt[*].eth[0].macLayer.queue.queue[4].display-name = "tsn"
######################################################################################
# enable streams
*.detCom*.nwtt.bridging.streamCoder.decoder.mapping = [{pcp: 0, stream: "best effort"}, {pcp: 6, stream: "video"},
                                                  {pcp: 7, stream: "tsn"} ]

*.detCom*.nwtt.bridging.streamCoder.encoder.mapping = [{stream: "best effort", pcp: 0}, {stream: "video", pcp: 6},
                                                  {stream: "tsn", pcp: 7}]

# time-aware traffic shaping with 5 queues
*.detCom*.nwtt.eth[0].macLayer.queue.numTrafficClasses = 5
*.detCom*.nwtt.eth[0].macLayer.queue.queue[0].display-name = "best effort"
*.detCom*.nwtt.eth[0].macLayer.queue.queue[1].display-name = "excellent effort"
*.detCom*.nwtt.eth[0].macLayer.queue.queue[2].display-name = "critical"
*.detCom*.nwtt.eth[0].macLayer.queue.queue[3].display-name = "video"
*.detCom*.nwtt.eth[0].macLayer.queue.queue[4].display-name = "tsn"


##################################################
##################################################
# enable ingress per-stream filtering
**.hasIngressTrafficFiltering = true

# per-stream filtering
**.bridging.streamFilter.ingress.typename = "SimpleIeee8021qFilter"
**.bridging.streamFilter.ingress.numStreams = 3
**.bridging.streamFilter.ingress.classifier.mapping = {"best effort": 0, "video": 1, "tsn" : 2}
**.bridging.streamFilter.ingress.meter[*].typename = ""
**.bridging.streamFilter.ingress.filter[*].typename = ""
**.bridging.streamFilter.ingress.gate[*].typename = "PeriodicGate"
**.bridging.streamFilter.ingress.gate[0].initiallyOpen = true
**.bridging.streamFilter.ingress.gate[1].initiallyOpen = true
**.bridging.streamFilter.ingress.gate[2].initiallyOpen = true


