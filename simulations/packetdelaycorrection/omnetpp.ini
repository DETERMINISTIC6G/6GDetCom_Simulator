[General]
network = PDC
sim-time-limit = 60s
description = "General configuration"

**.displayGateSchedules = false
**.gateFilter = "**.eth[1].**"
**.gateScheduleVisualizer.height = 16
**.gateScheduleVisualizer.placementHint = "top"

*.histogramContainer.histograms = {Uplink: "../../../deterministic6g_data/PD-Wireless-5G-1/s1-UL_wall.xml"}

**.hasIncomingStreams = true
**.hasOutgoingStreams = true


[Uplink]
extends =  General

description = "Basic configuration for uplink (w/o PDC)"

*.detCom.dstt[0].delayUplink = rngProvider("histogramContainer","Uplink")

# client applications
*.device1.numApps = 2
*.device1.app[0].typename = "UdpSourceApp"
*.device1.app[0].display-name = "stream1"
*.device1.app[0].io.destAddress = "device2"
*.device1.app[0].io.destPort = 1001
*.device1.app[0].source.packetLength = 1000B - 54B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.device1.app[0].source.productionInterval = 10ms

*.device1.app[1].typename = "UdpSourceApp"
*.device1.app[1].display-name = "stream2"
*.device1.app[1].io.destAddress = "device2"
*.device1.app[1].io.destPort = 1002
*.device1.app[1].source.packetLength = 1000B - 54B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.device1.app[1].source.productionInterval = 10ms

# enable outgoing streams
*.device1.hasOutgoingStreams = true

# server applications
*.device2.numApps = 2
*.device2.app[*].typename = "UdpSinkApp"
*.device2.app[0].io.localPort = 1001
*.device2.app[1].io.localPort = 1002



*.detCom.nwtt.hasPdc = true

# default pdc
*.detCom.nwtt.bridging.pdc.defaultPdc = 1ms

# per stream pdc
*.detCom.nwtt.bridging.pdc.mapping = [
    {stream: "stream1", pdc: "5.84ms"},
    {stream: "stream2", pdc: "10.52ms", jitter: "uniform(0ms,0.5ms)"}]

*.detCom.*.bridging.streamCoder.typename = "StreamCoderLayer"
*.detCom.*.bridging.streamIdentifier.typename = "StreamIdentifierLayer"


*.detCom.*.bridging.streamIdentifier.identifier.mapping = [{stream: "stream1", packetFilter: expr(udp.destPort == 1001)},
                                                  {stream: "stream2", packetFilter: expr(udp.destPort == 1002)}]

*.detCom.*.bridging.streamCoder.encoder.mapping = [{stream: "stream1", pcp: 7},
												{stream: "stream2", pcp: 6}]

*.detCom.*.bridging.streamCoder.decoder.mapping = [{stream: "stream1", packetFilter: expr(udp.destPort == 1001)},
                                                  {stream: "stream2", packetFilter: expr(udp.destPort == 1002)}]

