on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read

env:
  INET_VERSION: ab360b8a58018eb485b5e07682faa6fef9ee80f3

jobs:
  fingerprint_test:
    name: "Fingerprint Test"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        split: [ 0, 1, 2, 3 ]
      fail-fast: false
    container:
      image: ghcr.io/omnetpp/omnetpp:u24.04-6.2.0
    steps:
      - name: Checkout Deterministic6G repository
        uses: actions/checkout@main
        with:
          path: 6GDetCom_Simulator

      - name: Install dependencies
        run: apt-get update && apt-get install -y unzip

      - name: Get deterministic6g_data
        shell: bash
        run: |
          wget https://github.com/DETERMINISTIC6G/deterministic6g_data/releases/latest/download/histograms_for_omnetpp.zip
          unzip histograms_for_omnetpp.zip -d deterministic6g_data
          rm histograms_for_omnetpp.zip

      - name: Checkout INET repository
        uses: actions/checkout@main
        with:
          repository: DETERMINISTIC6G/inet-gptp
          path: inet
          ref: ${{ env.INET_VERSION }}

      - run: mkdir -p /__w/deterministic6g/6GDetCom_Simulator/ccache

      - name: "Cache ccache"
        uses: actions/cache@v4
        with:
          path: /__w/deterministic6g/6GDetCom_Simulator/ccache
          key: native-ccache-${{ github.run_id }}
          # See: https://github.com/actions/cache/blob/main/tips-and-workarounds.md#update-a-cache
          restore-keys: native-ccache

      - name: "Build projects"
        shell: bash
        env:
          MODE: release
        run: |
          apt update
          apt install -y ccache
          source "/root/omnetpp/setenv"
          cd inet
          source setenv
          export PATH=/usr/lib/ccache:$PATH
          export CCACHE_DIR=/__w/deterministic6g/6GDetCom_Simulator/ccache
          opp_featuretool disable VoipStream DiffServExamples GeneralShowcases Z3GateSchedulingConfigurator TSNShowcases
          make makefiles
          make MODE=release -j $(nproc)
          cd ../6GDetCom_Simulator
          make makefiles
          make

      - name: "Run fingerprint test"
        shell: bash
        run: |
          source "/root/omnetpp/setenv"
          source inet/setenv
          cd 6GDetCom_Simulator/tests/fingerprint
          SPLIT_N=4
          SPLIT_I=${{ matrix.split }}
          inet_fingerprinttest -n $SPLIT_N -i $SPLIT_I

      - name: Upload error artifacts
        if: failure() # This ensures the step runs only if the workflow fails
        uses: actions/upload-artifact@v4
        with:
          name: error-files
          path: 6GDetCom_Simulator/tests/fingerprint/